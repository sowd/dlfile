# -*- coding: utf-8 -*-
"""
Usage: 
source venv/bin/activate
module load aws-cli/2.1
module load gcc/9.3.0
module load python/3.8/3.8.7
source ${HOME}/Apps/spack/share/spack/setup-env.sh
spack load ffmpeg@4.2.2  

python3 analyzebyhighernet.py

"""

"""AnalyzeByHigherHRNet

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18kzht6ejDfq5pnFlWDnXT3KiYh3n57NR

# Anaylze NikoViewData_06** by HigherHRNet result (computed by ABCI) in Colab

ABCI computation script: https://github.com/sowd/HigherHRNet-ABCI
"""

# Crop image region with poses

import os,sys,glob,cv2,math,shutil
import subprocess
from subprocess import PIPE
import time
import numpy as np
import pandas as pd


def crop():
  t_start = time.time()

  # ポーズファイル(_pose.csv)の読み込みと、サムネイル動画の書き込みを行うため、
  # GitHubのリポジトリ（NikoViewerData_06??）が並列に格納されているフォルダを指定
  ### REPOSITORIES_ROOT_PATH = '/content/gdrive/MyDrive/Research/3DModel/'
  REPOSITORIES_ROOT_PATH = '/home/acc13198qz/dataRepos/'

  # 新たにfnamemap.csvというのを作りました。リポジトリ内のファイル名から、大元のDB内の元動画の
  # パスを得るためのもの。このファイルはそのまま適当なところにコピーをお願いします。
  ### MAPFILE_PATH = '/content/gdrive/MyDrive/Research/dev/WearableGlasses/fnamemap.csv'
  MAPFILE_PATH = '/home/acc13198qz/higherHRNet/fnamemap.csv'

  # 上記マップファイルにはクラウドストレージ内のパスが書かれているため、Colabなどファイルに直接アクセス
  # 可能な場合はそのパスを書き換えるためのprefixとしてこの変数を用意したけど、ABCIで実行する場合は
  # 大幅に書き換える必要はないので、この変数を使っている場所でDLするようにして、この変数そのものは
  # 使わなくていいと思います。
  SRC_VID_PREFIX='/content/gdrive/MyDrive/Research/data/2006_owd/GlassesAndVoiceRecs/'

  # ffmpegで1fps動画に変換する際の、結果格納用のテンポラリファイル
  ### LO_FPS_FILE='/content/gdrive/MyDrive/Research/dev/WearableGlasses/tmp/lofps.mp4'
  LO_FPS_FILE='/home/acc13198qz/higherHRNet/tmp/lofps.mp4'

  # HigherHRNetで見つかったスケルトンを囲む領域を画像（＋スケルトン情報CSV）として出力するための
  # フォルダ。なくても勝手に作られる。
  ### OUT_BBOXES_PREFIX='/content/gdrive/MyDrive/Research/dev/WearableGlasses/HigherHRNetResults/bbox/'
  OUT_BBOXES_PREFIX='/home/acc13198qz/higherHRNet/bbox/'

  # Parse mapfile into dictionary
  #  1_23_pose.csv みたいな名前から、元ファイルのパスを得るための辞書。
  #  キーは0601Blue1_4_pose.csvみたいな短い形で、valueは元ファイルのパスそのもの。
  #  ABCIで動かすなら、mapfileに含まれる以下のようなパスそのままをvalueにして良いと思う。
  #   /data-202006/Others/06-01/Glasses/Blue/2020-05-31-14-15-24/output03.mkv
  srcFilePathMap={}
  with open(MAPFILE_PATH, "r", encoding="utf_8") as mapfile:
    while True:
      line = mapfile.readline()
      if not line: break
      t = line.split(',')
      if len(t) != 2 : continue

      p=len('/home/acc13197fa/dataRepos/NikoViewerData_')
      # /home/acc13197fa/dataRepos/NikoViewerData_0601/eyeBlue/1_4_pose.csv
      # => 0601Blue1_4_pose.csv
      tsp = t[1].split('/')
      key=t[1][p:p+4]+tsp[-2][3:]+tsp[-1].strip()
      #key=t[1][p:p+4]+t[1][p+8:p+12]+t[1][p+13:].strip()
      # ABCIの時は、SRC_VID_PREFIXに置き換えを行わなくて良いと思う
      ### srcFilePathMap[key]=SRC_VID_PREFIX+t[0][len('/data-202006/Others/'):]
      srcFilePathMap[key]=t[0][1:]

  '''
  try:
    shutil.rmtree(OUT_BBOXES_PREFIX)
  except:
    e=1
  '''

  for dayDirPath in glob.glob(REPOSITORIES_ROOT_PATH + 'NikoViewerData_*'):
    day = dayDirPath[-4:]
    if day != '0605' : continue
    #if day > '0601' : continue
    #if day < '0602' or day > '0611' : continue
    for rl in ['Blue','Red']:
      print(dayDirPath.strip()+'/eye'+rl+'/*.csv')
      for csvFilePath in sorted(glob.glob(dayDirPath.strip()+'/eye'+rl+'/*_pose.csv')):
        fileNameBase = csvFilePath.split('/')[-1][:-len('_pose.csv')]
        print(csvFilePath)
        # https://drive.google.com/drive/folders/1-luzPqYaDQph-U1Ngq0GMwvJf680mYdb
        vidKey=day+rl+csvFilePath.split('/')[-1]
        #  ex: 0601Blue1_4_pose.csv


        # サムネイル動画を生成。本当は直接.oggにしたい(mp4でなく)。
        thumbVideoFPS = 1
        thumbVideoW = 256
        thumbVideoH = 192
        thumbFilePath = csvFilePath[:-len('.csv')]+'.mp4'
        if os.path.exists(thumbFilePath):
          print('Skipping: '+thumbFilePath)
          #os.remove(thumbFilePath)
          continue

        video_writer = cv2.VideoWriter(
            thumbFilePath , cv2.VideoWriter_fourcc(*'mp4v')
            , thumbVideoFPS, (thumbVideoW, thumbVideoH))

        # Convert to lo fps movie
        #  ABCIで動かす場合、srcFilePathMap[vidKey]で得られるパスはクラウド内のファイルのパスなので、
        #  DLしてからffmpegに食わせる必要があります。
        
        ### DL for ABCI
        INPUT_VIDEO = '/home/acc13198qz/higherHRNet/tmp/input.mkv'
        cmd = 'aws --endpoint-url https://s3.abci.ai s3 cp s3://%s %s' %(srcFilePathMap[vidKey], INPUT_VIDEO)
        proc = subprocess.run(cmd, shell=True, stdout=PIPE, stderr=PIPE, text=True)
        print(cmd)
        # print(proc.stdout)
        if proc.stderr:
          print(proc.stderr)
          return

        ### srcFilePathMap[vidKey] => INPUT_VIDEO
        
        if rl == 'Blue' :   # Blueは180°回転する必要がある
          cmd = 'ffmpeg -y -i %s -r 1 -vf "vflip,hflip" -loglevel warning %s' %(INPUT_VIDEO, LO_FPS_FILE)
        else:
          cmd = 'ffmpeg -y -i %s -r 1 -loglevel warning %s' %(INPUT_VIDEO, LO_FPS_FILE)
        proc = subprocess.run(cmd, shell=True, stdout=PIPE, stderr=PIPE, text=True)
        print(cmd)
        print(proc.stdout)
        print(proc.stderr)
        #result = proc.stdout

        cap = cv2.VideoCapture(LO_FPS_FILE)
        vid_width  = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
        vid_height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
  
        frmNum = -1
        poseid = 0
        with open(csvFilePath, "r", encoding="utf_8") as fileobj:
          # Just count line numbers
          while True:
            line = fileobj.readline()
            if not line: break

            elems = line.split(',')
            #print('len(elems)='+str())
            if len(elems) != 2+17*3: continue

            tgtFrm = int(elems[0])
            label = int(elems[1])

            while frmNum < tgtFrm :
              if frmNum != -1 :
                video_writer.write( cv2.resize(frm_skels,(thumbVideoW, thumbVideoH)))

              bAvailable, frm = cap.read()
              if not bAvailable : break
              frm_skels = frm.copy() # Copy image for skeleton rendering

              frmNum = frmNum + 1

            if frmNum != tgtFrm : break


            ############################
            # crop region and output to file

            # csv format is:
            #   frame_index,detection_index,<point 0>,<point 1>,...,<point hrnet_j>
            # where each <point N> corresponds to three elements:
            #   y_coordinate,x_coordinate,confidence
            xmin,xmax = sys.float_info.max,-sys.float_info.max
            ymin,ymax = sys.float_info.max,-sys.float_info.max

            # conf_sum=0
            for vi in range(17):
              y,x,conf = float(elems[2+vi*3]),float(elems[2+vi*3+1]),float(elems[2+vi*3+2])
              # conf_sum=conf_sum+conf
              xmin = min(x,xmin)
              xmax = max(x,xmax)
              ymin = min(y,ymin)
              ymax = max(y,ymax)

            # extend bbox 20%
            extendAmount=0.2
            roi_w = xmax - xmin
            xmin,xmax = math.ceil(xmin-roi_w*extendAmount/2),math.floor(xmax+roi_w*extendAmount/2)
            xmin,xmax = max(0,xmin),min(xmax,vid_width)
            roi_h = ymax - ymin
            ymin,ymax = math.ceil(ymin-roi_h*extendAmount/2),math.floor(ymax+roi_h*extendAmount/2)
            ymin,ymax = max(0,ymin),min(ymax,vid_height)

            #if conf_sum/17.0 < 0.5 : continue
            #print("conf=",conf_sum/17.0)
            outPath = '%s%s_%s_%s_%d_%d.jpg' % (OUT_BBOXES_PREFIX,day,rl,fileNameBase,frmNum,poseid)
            try:
              # crop
              cropFrame = frm[ ymin:ymax , xmin:xmax ]

              # skeleton in the image
              newSkel = []

              poseid = poseid + 1
              outPath = '%s%s_%s_%s_%d_%d.jpg' % (OUT_BBOXES_PREFIX,day,rl,fileNameBase,frmNum,poseid)
              skelCSVOutPath = '%s%s_%s_%s_%d_%d.csv' % (OUT_BBOXES_PREFIX,day,rl,fileNameBase,frmNum,poseid)

              os.makedirs(os.path.dirname(outPath),exist_ok=True)
              cv2.imwrite(outPath, cropFrame)
              print('Wrote:'+outPath)

              with open(skelCSVOutPath, "w", encoding="utf_8") as skelFile:
                firstToken=''
                for vi in range(17):
                  skelFile.write(firstToken+"%f,%f,%f"%(float(elems[2+vi*3])-ymin , float(elems[2+vi*3+1])-xmin , float(elems[2+vi*3+2])))
                  firstToken=','
                print('Wrote:'+skelCSVOutPath)


            except:
              print('Error in writing '+outPath)

            #################################
            ## Render skeleton to frm_skels
            for e in [[15, 13], [13, 11], [16, 14], [14, 12], [11, 12], [5, 11], [6, 12], [5, 6], [5, 7],[6, 8], [7, 9], [8, 10], [1, 2], [0, 1], [0, 2], [1, 3], [2, 4],[0, 5], [0, 6]]:
              y1,x1,y2,x2 = float(elems[2+3*e[0]]),float(elems[2+3*e[0]+1]),float(elems[2+3*e[1]]),float(elems[2+3*e[1]+1])
              frm_skels = cv2.line(frm_skels,(int(x1),int(y1)),(int(x2),int(y2)),(0,255,0),5)

        cap.release()
        video_writer.release()
        print('Wrote: '+thumbFilePath)

  # Time past
  hours, rem = divmod(time.time()-t_start, 3600)
  minutes, seconds = divmod(rem, 60)
  print("Time past: {:0>2}:{:0>2}:{:05.2f}".format(int(hours),int(minutes),seconds))



# List recognized poses num
def list_recognized_poses_num():
  t_start = time.time()

  for dayDirPath in glob.glob(REPOSITORIES_ROOT_PATH + 'NikoViewerData_*'):
    #if not '0605' in dayDirPath : continue
    if dayDirPath[-4:] < '0612' : continue

    ms = 0 # minutes
    poses = 0
    for rl in ['Blue','Red']:
      ms = ms + 1
      #print(dayDirPath.strip()+'/eye'+rl+'/*.csv')

      for csvFilePath in glob.glob(dayDirPath.strip()+'/eye'+rl+'/*_pose.csv'):
        # print(csvFilePath) 

        with open(csvFilePath, "r", encoding="utf_8") as fileobj:
          # Just count line numbers
          while True:
            line = fileobj.readline()
            if line:
              poses = poses + 1
            else:
              break

    print(dayDirPath[-4:]+' : '+str(poses/ms) )

  # Time past
  hours, rem = divmod(time.time()-t_start, 3600)
  minutes, seconds = divmod(rem, 60)
  print("Time past: {:0>2}:{:0>2}:{:05.2f}".format(int(hours),int(minutes),seconds))

  # 0601 : 22628.0
  # 0602 : 63013.5
  # 0603 : 58628.5
  # 0604 : 81908.0
  # 0605 : 11479.5
  # 0608 : 35280.5
  # 0610 : 45584.0
  # 0611 : 4458.5
  # 0612 : 38352.0
  # 0615 : 16525.5
  # 0616 : 15756.5
  # 0617 : 36136.0
  # 0618 : 34655.0
  # 0619 : 38202.0


if __name__ == "__main__":
  crop()
  # list_recognized_poses_num()
